version: "3.7"
services:
  ## Mysql
  mysql:
    container_name: mysql-dev
    image: mysql:latest
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: 123456
    command: --lower_case_table_names=1
    networks:
      - local-dev
  ## PostgreSQL
  postgreSQL:
    container_name: postgreSQL-dev
    image: postgres:14.5
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123456
    volumes:
      - /Users/I312313/Developer/docker/postgreSQL:/var/lib/postgresql/data
    networks:
      - local-dev
  ## Hana2
  hana2:
    container_name: hana2-dev
    image: docker.wdf.sap.corp:50000/bizx-database/hana2-rmda:trunk.weekly
    hostname: hana
    ports:
      - 30015:30015
    networks:
      - local-dev
  hanaIR:
    container_name: hanaIR-dev
    image: docker.wdf.sap.corp:50000/bizx-database/hana2-rmda:trunk.weekly
    hostname: hana
    ports:
      - 30115:30015
    volumes:
      - /Volumes/forhana:/data/instancerefresh
    networks:
      - local-dev
  ## Consul
  consul:
    container_name: consul-dev
    image: consul:latest
    ports:
      - 8500:8500/tcp
    command: "agent -server -ui -bootstrap-expect=1 -client=0.0.0.0"
    networks:
      - local-dev
  ## Redis
  redis:
    container_name: redis-dev
    image: redis:latest
    ports:
      - 6379:6379
    networks:
      - local-dev
  ## Zookeeper
  zookeeper:
    container_name: zookeeper-dev
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    networks:
      - local-dev
  ## Kafka
  kafka:
    container_name: kafka-dev
    image: wurstmeister/kafka:2.12-2.5.0
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - local-dev
  ## Elasticsearch
  es01:
    image: elasticsearch:7.7.0
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      # ----- Used for elasticsearch cluster -----
      # - discovery.seed_hosts=es02
      # - cluster.initial_master_nodes=es01,es02
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - local-dev
  # es02:
  #   image: elasticsearch:7.7.0
  #   container_name: es02
  #   environment:
  #     - node.name=es02
  #     - cluster.name=es-docker-cluster
  #     - discovery.seed_hosts=es01
  #     - cluster.initial_master_nodes=es01,es02
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - data02:/usr/share/elasticsearch/data
  #   networks:
  #     - local-dev
  ## kibana
  kibana:
    image: kibana:7.7.0
    container_name: kibana
    restart: always
    ports:
      - 5601:5601
    environment:
      I18N_LOCALE: zh-CN
    networks:
      - local-dev
    links:
      - es01:elasticsearch
volumes:
  data01:
    driver: local
  # data02:
  #   driver: local
networks:
  local-dev:
    driver: bridge